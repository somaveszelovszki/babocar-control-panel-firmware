/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */     

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
osThreadId SetupTaskHandle;
uint32_t SetupTaskBuffer[ 1024 ];
osStaticThreadDef_t SetupTaskControlBlock;
osThreadId DebugTaskHandle;
uint32_t DebugTaskBuffer[ 1024 ];
osStaticThreadDef_t DebugTaskControlBlock;
<<<<<<< HEAD
osThreadId ControlTaskHandle;
uint32_t ControlTaskBuffer[ 1024 ];
osStaticThreadDef_t ControlTaskControlBlock;
=======
osThreadId ProgLabyrinthTaskHandle;
uint32_t ProgLabyrinthTaskBuffer[ 1024 ];
osStaticThreadDef_t ProgLabyrinthTaskControlBlock;
osThreadId ProgRaceTrackTaskHandle;
uint32_t ProgRaceTrackTaskBuffer[ 1024 ];
osStaticThreadDef_t ProgRaceTrackTaskControlBlock;
osMessageQId LogQueueHandle;
uint8_t LogQueueBuffer[ 16 * 128 ];
osStaticMessageQDef_t LogQueueControlBlock;
osMessageQId ControlQueueHandle;
uint8_t ControlQueueBuffer[ 1 * 16 ];
osStaticMessageQDef_t ControlQueueControlBlock;
osMutexId CarMutexHandle;
osStaticMutexDef_t CarMutexControlBlock;
osMutexId FrontLinePositionsMutexHandle;
osStaticMutexDef_t FrontLinePositionsMutexControlBlock;
osMutexId RearLinePositionsMutexHandle;
osStaticMutexDef_t RearLinePositionsMutexControlBlock;
>>>>>>> Program tasks from old implementation added

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void runSetupTask(const void *argument);
void runDebugTask(const void *argument);
void runControlTask(const void *argument);
<<<<<<< HEAD
/* USER CODE END FunctionPrototypes */

void StartSetupTask(void const * argument);
void StartDebugTask(void const * argument);
void StartControlTask(void const * argument);
=======
void runProgLabyrinthTask(const void *argument);
void runProgRaceTrackTask(const void *argument);
/* USER CODE END FunctionPrototypes */

void StartIdleTask(void const * argument);
void StartControlTask(void const * argument);
void StartDebugTask(void const * argument);
void StartProgLabyrinthTask(void const * argument);
void StartProgRaceTrackTask(void const * argument);
>>>>>>> Program tasks from old implementation added

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}                   
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

<<<<<<< HEAD
=======
  /* Create the queue(s) */
  /* definition and creation of LogQueue */
  osMessageQStaticDef(LogQueue, 16, 128, LogQueueBuffer, &LogQueueControlBlock);
  LogQueueHandle = osMessageCreate(osMessageQ(LogQueue), NULL);

  /* definition and creation of ControlQueue */
  osMessageQStaticDef(ControlQueue, 1, 16, ControlQueueBuffer, &ControlQueueControlBlock);
  ControlQueueHandle = osMessageCreate(osMessageQ(ControlQueue), NULL);

>>>>>>> Program tasks from old implementation added
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SetupTask */
  osThreadStaticDef(SetupTask, StartSetupTask, osPriorityNormal, 0, 1024, SetupTaskBuffer, &SetupTaskControlBlock);
  SetupTaskHandle = osThreadCreate(osThread(SetupTask), NULL);

  /* definition and creation of DebugTask */
  osThreadStaticDef(DebugTask, StartDebugTask, osPriorityLow, 0, 1024, DebugTaskBuffer, &DebugTaskControlBlock);
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);

<<<<<<< HEAD
  /* definition and creation of ControlTask */
  osThreadStaticDef(ControlTask, StartControlTask, osPriorityNormal, 0, 1024, ControlTaskBuffer, &ControlTaskControlBlock);
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
=======
  /* definition and creation of ProgLabyrinthTask */
  osThreadStaticDef(ProgLabyrinthTask, StartProgLabyrinthTask, osPriorityNormal, 0, 1024, ProgLabyrinthTaskBuffer, &ProgLabyrinthTaskControlBlock);
  ProgLabyrinthTaskHandle = osThreadCreate(osThread(ProgLabyrinthTask), NULL);

  /* definition and creation of ProgRaceTrackTask */
  osThreadStaticDef(ProgRaceTrackTask, StartProgRaceTrackTask, osPriorityNormal, 0, 1024, ProgRaceTrackTaskBuffer, &ProgRaceTrackTaskControlBlock);
  ProgRaceTrackTaskHandle = osThreadCreate(osThread(ProgRaceTrackTask), NULL);
>>>>>>> Program tasks from old implementation added

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartSetupTask */
/**
  * @brief  Function implementing the SetupTask thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartSetupTask */
void StartSetupTask(void const * argument)
{
    
    
    
    
<<<<<<< HEAD
=======
    
    

  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartIdleTask */
}
>>>>>>> Program tasks from old implementation added

  /* USER CODE BEGIN StartSetupTask */
  runSetupTask(argument);
  /* USER CODE END StartSetupTask */
}

/* USER CODE BEGIN Header_StartDebugTask */
/**
* @brief Function implementing the DebugTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
  /* USER CODE BEGIN StartDebugTask */
  runDebugTask(argument);
  /* USER CODE END StartDebugTask */
}

<<<<<<< HEAD
/* USER CODE BEGIN Header_StartControlTask */
/**
* @brief Function implementing the ControlTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlTask */
void StartControlTask(void const * argument)
{
  /* USER CODE BEGIN StartControlTask */
  runControlTask(argument);
  /* USER CODE END StartControlTask */
=======
/* USER CODE BEGIN Header_StartProgLabyrinthTask */
/**
* @brief Function implementing the ProgLabyrinthTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProgLabyrinthTask */
void StartProgLabyrinthTask(void const * argument)
{
  /* USER CODE BEGIN StartProgLabyrinthTask */
  runProgLabyrinthTask(argument);
  /* USER CODE END StartProgLabyrinthTask */
}

/* USER CODE BEGIN Header_StartProgRaceTrackTask */
/**
* @brief Function implementing the ProgRaceTrackTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProgRaceTrackTask */
void StartProgRaceTrackTask(void const * argument)
{
  /* USER CODE BEGIN StartProgRaceTrackTask */
  runProgRaceTrackTask(argument);
  /* USER CODE END StartProgRaceTrackTask */
>>>>>>> Program tasks from old implementation added
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     
/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
